service: serverless-api

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: ap-south-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.tasksTableName}
    DYNAMODB_USER_TABLE_NAME: ${self:custom.usersTableName}

custom:
  tasksTableName: tasks-table-${self:provider.stage}
  usersTableName: users-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  createUser:
    handler: api.createUser
    name: create-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: user
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
        Resource: !GetAtt UsersTable.Arn
  getTask:
    handler: api.getTask
    name: get-task
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: task/{taskId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  createTask:
    handler: api.createTask
    name: create-task
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: task
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  updateTask:
    handler: api.updateTask
    name: update-task
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: task/{taskId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  deleteTask:
    handler: api.deleteTask
    name: delete-task
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: task/{taskId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  getAllTasksForAUser:
    handler: api.getAllTasksForAUser
    name: get-all-tasks-for-a-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: tasks/user/{userId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  getAllUsers:
    handler: api.getAllUsers
    name: get-all-users
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: user
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  assignTaskToAUser:
    handler: api.assignTaskToAUser
    name: assign-task-to-a-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: tasks/{taskId}/assign/{userId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  updateTaskToInprogress:
    handler: api.updateTaskToInprogress
    name: update-task-to-inprogress
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: tasks/{taskId}/accept
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  updateTaskToComplete:
    handler: api.updateTaskToComplete
    name: update-task-to-Complete
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: tasks/{taskId}/complete
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn
  updateTaskToClose:
    handler: api.updateTaskToClose
    name: update-task-to-close
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: tasks/{taskId}/close
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource:
          - !GetAtt TasksTable.Arn
          - !GetAtt UsersTable.Arn

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tasksTableName}
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: "email"
            KeySchema:
              - AttributeName: email
                KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
